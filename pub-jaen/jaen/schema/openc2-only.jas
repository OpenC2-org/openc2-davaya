/*
module:        openc2
title:         OpenC2 Command Definitions
version:       0.3
description:   Datatypes that define the content of OpenC2 commands.  These
               types are used with an Encoder/Decoder (codec) to serialize and
               deserialize commands for transmission in a format such as JSON,
               XML, or CBOR, or to generate format-specific message schemas.
namespace:     http://openc2.org/openc2
root:          OpenC2Object
import:        1, target, http://openc2.org/target
*/

OpenC2Object ::= CHOICE {
    command      [1] OpenC2Command,
    response     [2] OpenC2Response,
    alert        [3] OpenC2Alert
}

OpenC2Command ::= RECORD {
    action       Action,
    target       Target,
    actuator     Actuator OPTIONAL,
    modifiers    Modifiers OPTIONAL
}

OpenC2Response ::= RECORD {
    source      DeviceID,       -- Device Identifier of the command issuer
    cmdref      CommandID,      -- Command unique identifier, from "id" modifier
    status      StatusCode,     -- Adapted from HTTP Status Codes, RFC 7231
    statusText  STRING,         -- Status description
    results     STRING          -- Results of executing the command
}

OpenC2Alert ::= RECORD {
    message      STRING
}

Action ::= ENUMERATED {
    scan         (1),   --
    locate       (2),
    query        (3),
    report       (4),
    get          (5),
    notify       (6),
    deny         (7),
    contain      (8),
    allow        (9),
    start        (10),
    stop         (11),
    restart      (12),
    pause        (13),
    resume       (14),
    cancel       (15),
    set          (16),
    update       (17),
    move         (18),
    redirect     (19),
    delete       (20),
    snapshot     (21),
    detonate     (22),
    restore      (23),
    save         (24),
    modify       (25),
    throttle     (26),
    delay        (27),
    substitute   (28),
    copy         (29),
    sync         (30),
    distill      (31),
    augment      (32),
    investigate  (33),
    mitigate     (34),
    remediate    (35)
}

Actuator ::= RECORD {
    type         ActuatorType,
    specifiers   ActuatorObject.&type OPTIONAL
}

ActuatorType ::= ENUMERATED {
    endpoint                         (1),
    endpoint-digital-telephone-handset (2),
    endpoint-laptop                  (3),
    endpoint-pos-terminal            (4),
    endpoint-printer                 (5),
    endpoint-sensor                  (6),
    endpoint-server                  (7),
    endpoint-smart-meter             (8),
    endpoint-smart-phone             (9),
    endpoint-tablet                  (10),
    endpoint-workstation             (11),
    network                          (12),
    network-bridge                   (13),
    network-firewall                 (14),
    network-gateway                  (15),
    network-guard                    (16),
    network-hips                     (17),
    network-hub                      (18),
    network-ids                      (19),
    network-ips                      (20),
    network-modem                    (21),
    network-nic                      (22),
    network-proxy                    (23),
    network-router                   (24),
    network-security-manager         (25),
    network-sense-making             (26),
    network-sensor                   (27),
    network-switch                   (28),
    network-vpn                      (29),
    network-wap                      (30),
    process                          (31),
    process-aaa-server               (32),
    process-anti-virus-scanner       (33),
    process-connection-scanner       (34),
    process-directory-server         (35),
    process-dns-server               (36),
    process-email-service            (37),
    process-file-scanner             (38),
    process-location-service         (39),
    process-network-scanner          (40),
    process-remediation-service      (41),
    process-reputation-service       (42),
    process-sandbox                  (43),
    process-virtualization-service   (44),
    process-vulnerability-scanner    (45)
}

ActuatorSpecifiers ::= RECORD {
    port         STRING OPTIONAL,
    asset_id     STRING OPTIONAL
}

ActuatorObject ::= MAP {
    endpoint                         [1] ActuatorSpecifiers,
    endpoint-digital-telephone-handset [2] ActuatorSpecifiers,
    endpoint-laptop                  [3] ActuatorSpecifiers,
    endpoint-pos-terminal            [4] ActuatorSpecifiers,
    endpoint-printer                 [5] ActuatorSpecifiers,
    endpoint-sensor                  [6] ActuatorSpecifiers,
    endpoint-server                  [7] ActuatorSpecifiers,
    endpoint-smart-meter             [8] ActuatorSpecifiers,
    endpoint-smart-phone             [9] ActuatorSpecifiers,
    endpoint-tablet                  [10] ActuatorSpecifiers,
    endpoint-workstation             [11] ActuatorSpecifiers,
    network                          [12] ActuatorSpecifiers,
    network-bridge                   [13] ActuatorSpecifiers,
    network-firewall                 [14] ActuatorSpecifiers,
    network-gateway                  [15] ActuatorSpecifiers,
    network-guard                    [16] ActuatorSpecifiers,
    network-hips                     [17] ActuatorSpecifiers,
    network-hub                      [18] ActuatorSpecifiers,
    network-ids                      [19] ActuatorSpecifiers,
    network-ips                      [20] ActuatorSpecifiers,
    network-modem                    [21] ActuatorSpecifiers,
    network-nic                      [22] ActuatorSpecifiers,
    network-proxy                    [23] ActuatorSpecifiers,
    network-router                   [24] ActuatorSpecifiers,
    network-security-manager         [25] ActuatorSpecifiers,
    network-sense-making             [26] ActuatorSpecifiers,
    network-sensor                   [27] ActuatorSpecifiers,
    network-switch                   [28] ActuatorSpecifiers,
    network-vpn                      [29] ActuatorSpecifiers,
    network-wap                      [30] ActuatorSpecifiers,
    process                          [31] ActuatorSpecifiers,
    process-aaa-server               [32] ActuatorSpecifiers,
    process-anti-virus-scanner       [33] ActuatorSpecifiers,
    process-connection-scanner       [34] ActuatorSpecifiers,
    process-directory-server         [35] ActuatorSpecifiers,
    process-dns-server               [36] ActuatorSpecifiers,
    process-email-service            [37] ActuatorSpecifiers,
    process-file-scanner             [38] ActuatorSpecifiers,
    process-location-service         [39] ActuatorSpecifiers,
    process-network-scanner          [40] ActuatorSpecifiers,
    process-remediation-service      [41] ActuatorSpecifiers,
    process-reputation-service       [42] ActuatorSpecifiers,
    process-sandbox                  [43] ActuatorSpecifiers,
    process-virtualization-service   [44] ActuatorSpecifiers,
    process-vulnerability-scanner    [45] ActuatorSpecifiers
}

Modifiers ::= MAP {
    delay        [1] Duration OPTIONAL,
    duration     [2] Duration OPTIONAL,
    frequency    [3] Duration OPTIONAL,
    datetime     [4] DateTime OPTIONAL,
    response     [5] ResponseValue OPTIONAL,
    method       [6] MethodValue OPTIONAL,
    where        [7] WhereValue OPTIONAL,
    context_ref  [8] INTEGER OPTIONAL,
    id           [9] CommandID OPTIONAL
}

Duration ::= STRING(PATTERN "^PT(\d+H(\d+M(\d+S)?)?|\d+M(\d+S)?|\d+S)$")

DateTime ::= STRING(PATTERN "^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d{1,6})?(Z|[-+]\d\d:\d\d)$")

ResponseValue ::= ENUMERATED {
    ack          (1),
    status       (2)
}

MethodValue ::= CHOICE {            -- Method must agree with Action (test descriptions)
    deny         [1] DenyMethod,    -- Action must be "deny"
    pause        [2] PauseMethod,   -- Action must be 'pause'
    scan         [3] ScanMethod,    -- Action must be 'scan"
    start        [4] StartMethod,   -- Action must be start
    stop         [5] StopMethod     -- Action must be "stop"
}

DenyMethod ::= ENUMERATED {
    acl          (1),
    blackhole    (2),
    sinkhole     (3),
    blacklist    (4),
    whitelist    (5)
}

PauseMethod ::= ENUMERATED {
    hibernate    (1),
    sleep        (2),
    suspend      (3)
}

ScanMethod ::= ENUMERATED {
    authenticated      (1),
    non-authenticated  (2)
}

StartMethod ::= ENUMERATED {
    spawn        (1)
}

StopMethod ::= ENUMERATED {
    graceful     (1),
    immediate    (2)
}

WhereValue ::= ENUMERATED {
    internal     (1),
    perimeter    (2)
}

DeviceID ::= STRING             -- Device Identifier of the command issuer

CommandID ::= STRING            -- Command unique identifier

StatusCode ::= ENUMERATED {     -- Adapted from HTTP Status Codes, RFC 7231
    Processing              (102),      -- 1xx: Informational
    OK                      (200),      -- 2xx: Success
    Bad_Request             (400),      -- 3xx: Redirection
    Unauthorized            (401),      -- 4xx: Client Error
    Forbidden               (403),
    Internal_Server_Error   (500),      -- 5xx: Server Error
    Not_Implemented         (501)
}
