# EBNF Grammar for Pseudo-ASN files
# Compile grammar into parser using:  $ python -m grako pasn.ebnf -o pasn_parse.py

@@grammar :: pasn

pasn = head:{!(name define) !begin any}   # Ignore anything before meta
    metas:[meta]                          # Administrative information - key:value pairs
    types:{type}+ $                       # Datatype definitions
    ;
meta = begin {!end [[WS] NL] @:KVal} end ;
begin = "/*" ;
end = "*/" ;
KVal = key:name ":" val:{Val}+ ;               # Don't skip whitespace
Val = WS @:/.*/ NL ;
WS = /\s+/ ;
NL = /(\n|\r)+/ ;

type = name:name define type:name [topts:topts] [tdesc:comment] [fields:fields] ;
any =  /(\w|_|-)+|\s+|./ ;
name = /(\w|_|-)+/ ;
qname = /(\w+:)?(\w|_|-)+/ ;
int = /\d+/ ;
define = "::=" ;
comment = "--" /.*/ ;
topts = "("                 # Datatype options
        ("PATTERN" any)
      ")" ;
fields = "{" @:",".{ field } "}" ;
field = ( name:qname tag:etag )                                                  # Enumeration value, or
      | ( name:(qname|"*") [tag:ftag] type:qname [fopts:fopts] [fdesc:comment] )  #  structured datatype field
      ;
etag = "(" @:int ")" ;
ftag = "[" @:int "]" ;
fopts = "OPTIONAL"          # Field options
      | "MIN" int
      | "MAX" int
      | ".&" name
      ;